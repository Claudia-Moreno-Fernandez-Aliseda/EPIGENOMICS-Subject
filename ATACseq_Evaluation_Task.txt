##### ===> ATACseq data: downstream analyses

# 1. Move to folder ATAC-seq, and create folders to store bigBed data files and peaks analyses files. Make sure the files are organized in a consistent way as done for ChIP-seq.

git clone https://github.com/bborsari/epigenomics_uvic

cd epigenomics_uvic

sudo docker run -v $PWD:$PWD -w $PWD --rm -it dgarrimar/epigenomics_course

cd ATAC-seq

mkdir data

mkdir analyses

mkdir bigBed.files

mkdir bigWig.files

mkdir metadata

mkdir annotation

mkdir data/tsv.files

mkdir data/bed.files

mkdir analyses/aggregation.plot

mkdir analyses/scatter.plot

mkdir analyses/peaks.analysis

# 2. Retrieve from a newly generated metadata file ATAC-seq peaks (bigBed narrow, pseudoreplicated peaks, assembly GRCh38) for stomach and sigmoid_colon for the same donor used in the previous sections.

## From ENCODE portal, select ENLDO451RUA donor => Experiment search: 1) Assay type: DNA accesibility 2) Assay type: ATAC-seq 3) Biosample: sigmoid-colon and stomach
## Download metadata

../bin/download.metadata.sh "https://www.encodeproject.org/metadata/?replicates.library.biosample.donor.uuid=d370683e-81e7-473f-8475-7716d027849b&status=released&status=submitted&status=in+progress&assay_slims=DNA+accessibility&assay_title=ATAC-seq&biosample_ontology.term_name=sigmoid+colon&biosample_ontology.term_name=stomach&type=Experiment"

## Filter bigBed file

grep -F "bigBed_narrowPeak" metadata.tsv |\
grep -F "pseudoreplicated_peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\
sort -k2,2 -k1,1r |\
sort -k2,2 -u > analyses/bigBed.peaks.ids.txt

cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
  wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done

## Check integrity

../bin/selectRows.sh <(cut -f1 analyses/bigBed.peaks.ids.txt) metadata.tsv | cut -f1,46 > bigBed.files/md5sum.txt

cat bigBed.files/md5sum.txt |\
while read filename original_md5sum; do
    md5sum bigBed.files/"$filename".bigBed |\
    awk -v filename="$filename" -v original_md5sum="$original_md5sum" 'BEGIN{FS=" "; OFS="\t"}{print filename, original_md5sum, $1}'
done > tmp
mv tmp bigBed.files/md5sum.txt

awk '$2!=$3' bigBed.files/md5sum.txt

# 3. For each tissue, run an intersection analysis using BEDTools: report 1) the number of peaks that intersect promoter regions, 2) the number of peaks that fall outside gene coordinates (whole gene body, not just the promoter regions).

## Convert bigBed to BED files

grep -F sigmoid_colon metadata.tsv|\
awk 'BEGIN{FS=OFS="\t"}$2=="fastq"{print $1}' |\
while read filename; do 
 wget -P data/fastq.files "https://www.encodeproject.org/files/$filename/@@download/$filename.fastq.gz";
done

grep -F stomach  metadata.tsv|\
awk 'BEGIN{FS=OFS="\t"}$2=="fastq"{print $1}' |\
while read filename; do 
 wget -P data/fastq.files "https://www.encodeproject.org/files/$filename/@@download/$filename.fastq.gz";
done

cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
    bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done

## Obtain annotation file

wget -P annotation "https://www.encodeproject.org/files/gencode.v24.primary_assembly.annotation/@@download/gencode.v24.primary_assembly.annotation.gtf.gz"

gunzip annotation/gencode.v24.primary_assembly.annotation.gtf.gz

## Extract promoter regions (2kb upstream and downstream TSS)

awk '$3=="gene"' annotation/gencode.v24.primary_assembly.annotation.gtf |\
grep -F "protein_coding" |\
cut -d ";" -f1 |\
awk 'BEGIN{OFS="\t"}{print $1, $4-2000, $4+2000, $10, 0, $7}' |\
sed 's/\"//g' |\
awk 'BEGIN{FS=OFS="\t"}$1!="chrM"{$2=($2<0)?0:$2; print $0}' > annotation/promoter_regions.bed

## Intersect and count peaks

cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
    bedtools intersect -a annotation/promoter_regions.bed -b data/bed.files/"$filename".bed -u | wc -l
done

#### There are 8857 peaks that intersect with promoter regions and ENCFF287UHP and 8956 peaks that intersect with promoter regions and ENCFF762IFP

## Extract gene body region

awk '$3=="gene"' annotation/gencode.v24.primary_assembly.annotation.gtf |\
grep -F "protein_coding" |\
cut -d ";" -f1 |\
awk 'BEGIN{OFS="\t"}{print $1, $4, $5, $10, 0, $7}' |\
sed 's/\"//g' |\
awk 'BEGIN{FS=OFS="\t"}$1!="chrM"{$2=($2<0)?0:$2; print $0}' > annotation/gene_body.bed

## Intersect and count peaks  that fall outside gene coordinates

cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
    bedtools intersect -a data/bed.files/"$filename".bed -b annotation/gene_body.bed -v | wc -l
done

#### There are 37037 peaks that intersect with gene body region and ENCFF287UHP and 34537 peaks that intersect with gene body region and ENCFF762IFP

##### ===> Study distal regulatory activity

# 1. Create a folder regulatory_elements inside epigenomics_uvic. This will be the folder where you store all your subsequent results.

cd ..

mkdir regulatory_elements

# 2. Distal regulatory regions are usually found to be flanked by both H3K27ac and H3K4me1. From your starting catalogue of open regions in each tissue, select those that overlap peaks of H3K27ac AND H3K4me1 in the corresponding tissue. You will get a list of candidate distal regulatory elements for each tissue. How many are they?

## Here I have to filter open regions that match with H3K27ac and H3K4me1 in each tissue

## Obtain peaks from ATAC-seq that fall outside gene coordinates

cut -f1 ATAC-seq/analyses/bigBed.peaks.ids.txt |\
while read filename; do
    bedtools intersect -a ATAC-seq/data/bed.files/"$filename".bed -b ATAC-seq/annotation/gene_body.bed -v > regulatory_elements/"$filename".distal.bed
done

## Obtain IDs of bigBed files from H3K27ac and H3K4me1

grep -E H3K27ac ChIP-seq/metadata.tsv |\
grep -F "bigBed_narrowPeak" |\
grep -F "pseudoreplicated_peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\
sort -k2,2 -k1,1r |\
sort -k2,2 -u > ATAC-seq/analyses/H3K27ac.peaks.ids.txt

grep -E H3K4me1 ChIP-seq/metadata.tsv |\
grep -F "bigBed_narrowPeak" |\
grep -F "pseudoreplicated_peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\
sort -k2,2 -k1,1r |\
sort -k2,2 -u > ATAC-seq/analyses/H3K4me1.peaks.ids.txt


## Download bigBed

cut -f1 ATAC-seq/analyses/H3K27ac.peaks.ids.txt |\
while read filename; do
    wget -P ATAC-seq/data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done

cut -f1 ATAC-seq/analyses/H3K4me1.peaks.ids.txt |\
while read filename; do
    wget -P ATAC-seq/data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done

## Convert bigBed to BED

cut -f1 ATAC-seq/analyses/H3K27ac.peaks.ids.txt |\
while read filename; do
    bigBedToBed ATAC-seq/data/bigBed.files/"$filename".bigBed ATAC-seq/data/bed.files/"$filename".bed
done

cut -f1 ATAC-seq/analyses/H3K4me1.peaks.ids.txt |\
while read filename; do
    bigBedToBed ATAC-seq/data/bigBed.files/"$filename".bigBed ATAC-seq/data/bed.files/"$filename".bed
done

## Filter regions that match with H3K27ac and H3K4me1

cut -f1 ATAC-seq/analyses/bigBed.peaks.ids.txt |\
while read filename; do
    bedtools intersect -a regulatory_elements/"$filename".distal.bed -b ATAC-seq/data/bed.files/ENCFF872UHN.bed -u |\
    bedtools intersect -a - -b ATAC-seq/data/bed.files/ENCFF977LBD.bed -u |\
    bedtools intersect -a - -b ATAC-seq/data/bed.files/ENCFF724ZOF.bed -u |\
    bedtools intersect -a - -b ATAC-seq/data/bed.files/ENCFF844XRN.bed -u > regulatory_elements/"$filename".candidate_distal.bed
done

wc -l regulatory_elements/*.candidate_distal.bed

# From 37037 distal elements in ENCFF287UHP, 5912 match with H3K27ac and H3K4me1. From 34537 distal elements in ENCFF762IFP, 4734 match H3K27ac and H3K4me1

# 3. Focus on regulatory elements that are located on chromosome 1, and generate a file regulatory.elements.starts.tsv that contains the name of the regulatory region (i.e. the name of the original ATAC-seq peak) and the start (5') coordinate of the region.

## Filter elements from chromosome 1

awk '$1=="chr1"' regulatory_elements/*.candidate_distal.bed > regulatory_elements/candidate_distal_chr1.bed

## Extract start (5') coordinates and name of regulatory elements

awk 'BEGIN{OFS="\t"}{print $4, $2}' regulatory_elements/candidate_distal_chr1.bed > regulatory_elements/regulatory.elements.starts.tsv

# 4. Focus on protein-coding genes located on chromosome 1. From the BED file of gene body coordinates that you generated here, prepare a tab-separated file called gene.starts.tsv which will store the name of the gene in the first column, and the start coordinate of the gene on the second column (REMEMBER: for genes located on the minus strand, the start coordinate will be at the 3'). 

awk '$3=="gene"' ATAC-seq/annotation/gencode.v24.primary_assembly.annotation.gtf |\
grep -F "protein_coding" |\
cut -d ";" -f1 |\
awk 'BEGIN{OFS="\t"}{print $1, $4, $5, $10, 0, $7, $10}' |\
sed 's/\"//g' |\
awk 'BEGIN{FS=OFS="\t"}$1!="chrM"{$2=($2-1); print $0}' > ATAC-seq/annotation/gencode.v24.protein.coding.gene.body.bed

awk '$1=="chr1"' ATAC-seq/annotation/gencode.v24.protein.coding.gene.body.bed > ATAC-seq/annotation/protein.coding.gene_body_chr1.bed

awk 'BEGIN{FS=OFS="\t"}{if ($6=="+") {start=$2} else {start=$3}; print $4, start}' ATAC-seq/annotation/protein.coding.gene_body_chr1.bed > regulatory_elements/gene.starts.tsv

# 5.  Complete the python script so that for a given coordinate --start the script returns the closest gene, the start of the gene and the distance of the regulatory element.

cd bin

wget -O get.distance.py "https://public-docs.crg.es/rguigo/Data/bborsari/UVIC/epigenomics_course/get.distance.py"

cd ../regulatory_elements

python ../bin/get.distance.py --input gene.starts.tsv --start 980000

##### My results: 
##### root@412e85a09425:/home/clau/MasterUVIC/EPIGENOMICS/BBorsari/epigenomics_uvic/regulatory_elements# python ../bin/get.distance.py --input gene.starts.tsv --start 980000
##### ENSG00000187642.9       982093  2093

#### My changes in Python script:
#### for line in open_input.readlines(): 
####        gene, y = line.strip().split('\t') 
####        position = int(y) 
####        distance = abs(position - enhancer_start) 

####        if distance < x: # if this absolute value is lower than x
####                x = distance # this value will now be your current x
####                selectedGene = gene # save gene as selectedGene
####                selectedGeneStart = y # save position as selectedGeneStart

# 6. For each regulatory element contained in the file regulatory.elements.starts.tsv, retrieve the closest gene and the distance to the closest gene 

cat regulatory.elements.starts.tsv |\
while read element start; do
    python ../bin/get.distance.py --input gene.starts.tsv --start $start
done > ./regulatoryElements.genes.distances.tsv

# 7.  Use R to compute the mean and the median of the distances stored in regulatoryElements.genes.distances.tsv

#> data <- read.table("regulatoryElements.genes.distances.tsv", header=FALSE, sep="\t")
#> View(data)
#> colnames(data) <- c("Gene", "GeneStart", "Distance")
#> mean_distance <- mean(data$Distance)
#> median_distance <- median(data$Distance)
#> print(paste("Mean Distance:", mean_distance))
#[1] "Mean Distance: 43509.9928172386"
#> print(paste("Median Distance:", median_distance))
#[1] "Median Distance: 25267"
